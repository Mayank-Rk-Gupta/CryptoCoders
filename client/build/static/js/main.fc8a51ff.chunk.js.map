{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","useState","contract","setContract","account","setAccount","Coders","setCoders","mintText","setMintText","loadNFTS","methods","totalSupply","call","results","i","coders","coder","push","loadWeb3Account","eth","getAccounts","accounts","loadWeb3Contract","net","getId","networkId","networkData","CryptoCoders","networks","abi","address","Contract","useEffect","className","href","src","alt","width","type","value","onChange","e","target","placeholder","onClick","mint","send","from","error","map","key","replace","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc8a51ff.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useEffect,useState } from \"react\";\nimport CryptoCoders from \"./contracts/CryptoCoders.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./App.css\";\n\nconst App = () => {\n\n  const[contract,setContract] = useState(null);\n  const[account,setAccount] = useState(\"\");\n  const[Coders,setCoders] = useState([]);\n  const [mintText, setMintText] = useState(\"\");\n\n  const mint = () => {\n    contract.methods.mint(mintText).send({ from: account }, (error)=>{\n      console.log(\"it worked\")\n      if(!error){\n        setCoders([...Coders, mintText])\n        setMintText(\"\");\n      }\n    });\n  }\n\n  \n const loadNFTS = async (contract) =>{\n   const totalSupply = await contract.methods.totalSupply().call();\n   let results = [];\n    for(let i = 0; i < totalSupply; i++){\n      let coder = await contract.methods.coders(i).call();\n      results.push(coder)\n    }\n    setCoders(results);\n\n }\n\n  const loadWeb3Account = async (web3) =>{\n    const accounts = await web3.eth.getAccounts();\n    if(accounts){\n      setAccount(accounts[0]);\n    }\n  }\n\n  const loadWeb3Contract = async (web3) => {\n    const networkId = await web3.eth.net.getId();\n    const networkData = CryptoCoders.networks[networkId];\n    if(networkData){\n      const abi = CryptoCoders.abi;\n      const address = networkData.address;\n      const contract = new web3.eth.Contract(abi, address);\n      setContract(contract);\n      return contract;\n    }\n  }\n\n  useEffect(async () => {\n    const web3 = await getWeb3();\n    await loadWeb3Account(web3);\n    let contract = await loadWeb3Contract(web3);\n    await loadNFTS(contract);\n\n  }, []);\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-light bg-light px-4\">\n        <a className=\"navbar-brand\" href=\"#\">Crypto Coders</a>\n        <span>{account}</span>\n      </nav>\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <div className=\"col d-flex flex-column align-items-center\">\n            <img className=\"mb-4\" src=\"https://avatars.dicebear.com/api/pixel-art/Mayank.svg\" alt=\"\" width=\"72\"/>\n            <h1 className=\"display-5 fw-bold\">Crypto Coders</h1>\n            <div className=\"col-6 text-center mb-3\" >\n              <p className=\"lead text-center\">These are some of the most highly motivated coders in the world! We are here to learn coding and apply it to the betterment of humanity. We are inventors, innovators, and creators</p>\n              <div>\n                <input \n                  type=\"text\"\n                  value={mintText}\n                  onChange={(e)=>setMintText(e.target.value)}\n                  className=\"form-control mb-2\"\n                  placeholder=\"e.g. Mayank\" />\n                <button onClick={mint} className=\"btn btn-primary\">Mint</button>\n              </div>\n            </div>\n            <div className=\"col-8 d-flex justify-content-center flex-wrap\">\n              {Coders.map((coder, key)=><div className=\"d-flex flex-column align-items-center\" key={key}>\n                    <img width=\"100\" src={`https://avatars.dicebear.com/api/pixel-art/${coder.replace(\"#\", \"\")}.svg`} />\n                    <span>{coder}</span>\n              </div>)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>);\n  };\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}